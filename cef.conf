# Roughly based on:
# https://github.com/elastic/ecs/issues/433
#############################################################################################

input {
  pipeline {
    address => "cef"
  }
}

filter {
  if [metadata][beat] == "metricbeat" {
    drop {}
  }

  # Set some basic defaults for header fields we may not be able to populate
  #############################################################################################
  mutate {
    add_field => {
      "[vendor]" => "elastic"
      "[product]" => "beats"
      "[version]" => "1.0.0"
      "[signature]" => "unknown"
      "[name]" => "unknown"
      "[severity]" => 1
    }
  }

  # If certain Event fields exist, replace the default CEF Header fields
  #############################################################################################
  if [agent][type]     { mutate { replace => { "[product]"   => "%{[agent][type]}" } } }
  if [agent][version]  { mutate { replace => { "[version]"   => "%{[agent][version]}" } } }
  if [event][id]       { mutate { replace => { "[signature]" => "%{[event][id]}" } } }
  if [event][module]   { mutate { replace => { "[name]"      => "%{[event][module]}" } } }
  if [event][severity] { mutate { replace => { "[severity]"  => "%{[event][severity]}" } } }

  # Use a single Ruby code block to detect, convert and set time stamps
  # Set all timestamps to milliseconds since epoch
  # Set certain timestamps to @timestamp if a more natural ECS field isnt populated
  #############################################################################################
  ruby {
    init => "require 'time'"
    code => '
      if event.get("[@timestamp]") then
        event.set("[rt]", (event.get("[@timestamp]").to_f * 1000).to_i );
      end

      if event.get("[event][start]").nil? then
        event.set("[start]", (event.get("[@timestamp]").to_f * 1000).to_i )
      else
        event.set("[start]", (event.get("[event][start]").to_f * 1000).to_i )
      end

      if event.get("[event][end]") then
        event.set("[end]", (event.get("[event][end]").to_f * 1000).to_i )
      end

      if event.get("[file][created]") then
        event.set("[fileCreateTime]", (event.get("[file][created]").to_f * 1000).to_i )
      end

      if event.get("[file][mtime]") then
        event.set("[fileModificationTime]", (event.get("[file][mtime]").to_f * 1000).to_i )
      end

      if event.get("[event][created]").nil? then
        event.set("[art]", (event.get("[@timestamp]").to_f * 1000).to_i )
      else
        event.set("[art]", (event.get("[event][created]").to_f * 1000).to_i )
      end
    '
    tag_on_exception => [ "_rubyexception" ]
  }


  if [event][action]                   { mutate { add_field => { "act" => "%{[event][action]}" } }
                                         truncate { fields => "act" length_bytes => 63 } }
  if [agent][name]                     { mutate { add_field => { "agentDnsDomain"               => "%{[agent][name]}" } }
                                         truncate { fields  => "agentDnsDomain" length_bytes => 255  } }
  if [agent][ip]                       { mutate { add_field => { "agt"                          => "%{[agent][ip]}" } } }
  if [agent][name]                     { mutate { add_field => { "ahost"                        => "%{[agent][name]}" } }
                                         truncate { fields  => "ahost" length_bytes => 1023  } }
  if [agent][id]                       { mutate { add_field => { "aid"                          => "%{[agent][id]}" } }
                                         truncate { fields  => "aid" length_bytes => 40  } }
  if [agent][mac]                      { mutate { add_field => { "amac"                         => "%{[agent][mac]}" } } }
  if [network][application]            { mutate { add_field => { "app"                          => "%{[network][application]}" } }
                                         truncate { fields  => "app" length_bytes => 31  } }
  if [agent][type]                     { mutate { add_field => { "at"                           => "%{[agent][type]}" } }
                                         truncate { fields  => "at" length_bytes => 63  } }
  if [agent][version]                  { mutate { add_field => { "av"                           => "%{[agent][version]}" } }
                                         truncate { fields  => "av" length_bytes => 31  } }
  if [organization][id]                { mutate { add_field => { "customerExternalID"           => "%{[organization][id]}" } }
                                         truncate { fields  => "customerExternalID" length_bytes => 200  } }
  if [organization][name]              { mutate { add_field => { "customerURI"                  => "%{[organization][name]}" } }
                                         truncate { fields  => "customerURI" length_bytes => 2048  } }
  if [destination][domain]             { mutate { add_field => { "destinationDnsDomain"         => "%{[destination][domain]}" } }
                                         truncate { fields  => "destinationDnsDomain" length_bytes => 255 } }
  if [destination][service][name]      { mutate { add_field => { "destinationServiceName"       => "%{[destination][service][name]}" } }
                                         truncate { fields  => "destinationServiceName" length_bytes => 1013 } }
  if [destination][nat][ip]            { mutate { add_field => { "destinationTranslatedAddress" => "%{[destination][nat][ip]}" } } }
  if [destination][nat][port]          { mutate { add_field => { "destinationTranslatedPort"    => "%{[destination][nat][port]}" } } }

  if [network][direction] {
    if [network][direction] == "inbound" {
      mutate { add_field => { "deviceDirection" => 0 } }
    } else if [network][direction] == "outbound" {
      mutate { add_field => { "deviceDirection" => 1 } }
    }
  }

  if [observer][hostname]              { mutate { add_field => { "deviceDnsDomain"              => "%{[observer][hostname]}" } }
                                         truncate { fields  => "deviceDnsDomain" length_bytes => 255 } }
  if [event][id]                       { mutate { add_field => { "DevicePayloadId"              => "%{[event][id]}" } }
                                         truncate { fields  => "DevicePayloadId" length_bytes => 128 } }
  if [process][name]                   { mutate { add_field => { "deviceProcessName"            => "%{[process][name]}" } }
                                         truncate { fields  => "deviceProcessName" length_bytes => 1023 } }
  if [destination][domain]             { mutate { add_field => { "dhost"                        => "%{[destination][domain]}" } }
                                         truncate { fields  => "dhost" length_bytes => 1023 } }
  if [destination][geo][location][lat] { mutate { add_field => { "dlat"                         => "%{[destination][geo][location][lat]}" } } }
  if [destination][geo][location][lon] { mutate { add_field => { "dlong"                        => "%{[destination][geo][location][lon]}" } } }
  if [destination][mac]                { mutate { add_field => { "dmac"                         => "%{[destination][mac]}" } } }
  if [destination][process][pid]       { mutate { add_field => { "dpid"                         => "%{[destination][process][pid]}" } } }
  if [destination][user][group]        { mutate { add_field => { "dpriv"                        => "%{[destination][user][group]}" } }
                                         truncate { fields  => "dpriv" length_bytes => 1023 } }
  if [destination][process][name]      { mutate { add_field => { "dproc"                        => "%{[destination][process][name]}" } }
                                         truncate { fields  => "dproc" length_bytes => 1023 } }
  if [destination][port]               { mutate { add_field => { "dpt"                          => "%{[destination][port]}" } } }
  if [destination][ip]                 { mutate { add_field => { "dst"                          => "%{[destination][ip]}" } } }
  if [event][timezone]                 { mutate { add_field => { "dtz"                          => "%{[event][timezone]}" } }
                                         truncate { fields  => "dtz" length_bytes => 255 } }
  if [destination][user][id]           { mutate { add_field => { "duid"                         => "%{[destination][user][id]}" } }
                                         truncate { fields  => "duid" length_bytes => 1023 } }
  if [destination][user][name]         { mutate { add_field => { "duser"                        => "%{[destination][user][name]}" } }
                                         truncate { fields  => "duser" length_bytes => 1023 } }
  if [observer][hostname]              { mutate { add_field => { "dvchost"                      => "%{[observer][hostname]}" } }
                                         truncate { fields  => "dvchost" length_bytes => 1023 } }
  if [observer][mac]                   { mutate { add_field => { "dvcmac"                       => "%{[observer][mac]}" } } }
  if [observer][ip]                    { mutate { add_field => { "dvc"                          => "%{[observer][ip]}" } } }
  if [process][pid]                    { mutate { add_field => { "dvcpid"                       => "%{[process][pid]}" } } }
  if [event][end]                      { mutate { add_field => { "end"                          => "%{[event][end]}" } } }
  if [event][id]                       { mutate { add_field => { "eventId"                      => "%{[event][id]}" } } }
  if [file][inode]                     { mutate { add_field => { "fileId"                       => "%{[file][inode]}" } }
                                         truncate { fields  => "fileId" length_bytes => 1023 } }
  if [file][path]                      { mutate { add_field => { "filePath"                     => "%{[file][path]}" } }
                                         truncate { fields  => "filePath" length_bytes => 1023 } }
  if [file][group]                     { mutate { add_field => { "filePermission"               => "%{[file][group]}" } }
                                         truncate { fields  => "filePermission" length_bytes => 1023 } }
  if [file][type]                      { mutate { add_field => { "fileType"                     => "%{[file][type]}" } }
                                         truncate { fields  => "fileType" length_bytes => 1023 } }
  if [file][name]                      { mutate { add_field => { "fname"                        => "%{[file][name]}" } }
                                         truncate { fields  => "fname" length_bytes => 1023 } }
  if [file][size]                      { mutate { add_field => { "fsize"                        => "%{[file][size]}" } } }
  if [source][bytes]                   { mutate { add_field => { "in"                           => "%{[source][bytes]}" } } }
  if [message]                         { mutate { add_field => { "msg"                          => "%{[message]}" } }
                                         truncate { fields  => "msg" length_bytes => 1023 } }
  if [event][outcome]                  { mutate { add_field => { "outcome"                      => "%{[event][outcome]}" } }
                                         truncate { fields  => "outcome" length_bytes => 63 } }
  if [destination][bytes]              { mutate { add_field => { "out"                          => "%{[destination][bytes]}" } } }
  if [network][transport]              { mutate { add_field => { "proto"                        => "%{[network][transport]}" } }
                                         truncate { fields  => "proto" length_bytes => 31 } }
  if [user_agent][original]            { mutate { add_field => { "requestClientApplication"     => "%{[user_agent][original]}" } }
                                         truncate { fields  => "requestClientApplication" length_bytes => 1023 } }
  if [http][request][referrer]         { mutate { add_field => { "requestContext"               => "%{[http][request][referrer]}" } }
                                         truncate { fields  => "requestContext" length_bytes => 2048 } }
  if [http][request][method]           { mutate { add_field => { "requestMethod"                => "%{[http][request][method]}" } }
                                         truncate { fields  => "requestMethod" length_bytes => 1023 } }
  if [url][original]                   { mutate { add_field => { "request"                      => "%{[url][original]}" } }
                                         truncate { fields  => "request" length_bytes => 1023 } }

  if [source][domain]                  { mutate { add_field => { "shost"                        => "%{[source][domain]}" } }
                                         truncate { fields  => "shost" length_bytes => 1023 } }
  if [source][geo][location][lat]      { mutate { add_field => { "slat"                         => "%{[source][geo][location][lat]}" } } }
  if [source][geo][location][lon]      { mutate { add_field => { "slong"                        => "%{[source][geo][location][lon]}" } } }
  if [source][mac]                     { mutate { add_field => { "smac"                         => "%{[source][mac]}" } } }
  if [source][domain]                  { mutate { add_field => { "sourceDnsDomain"              => "%{[source][domain]}" } }
                                         truncate { fields  => "sourceDnsDomain" length_bytes => 255 } }
  if [source][service][name]           { mutate { add_field => { "sourceServiceName"            => "%{[source][service][name]}" } }
                                         truncate { fields  => "sourceServiceName" length_bytes => 1023 } }
  if [source][nat][ip]                 { mutate { add_field => { "sourceTranslatedAddress"      => "%{[source][nat][ip]}" } } }
  if [source][nat][port]               { mutate { add_field => { "sourceTranslatedPort"         => "%{[source][nat][port]}" } } }
  if [source][process][pid]            { mutate { add_field => { "spid"                         => "%{[source][process][pid]}" } } }
  if [source][user][group]             { mutate { add_field => { "spriv"                        => "%{[source][user][group]}" } }
                                         truncate { fields  => "spriv" length_bytes => 1023 } }
  if [source][process][name]           { mutate { add_field => { "sproc"                        => "%{[source][process][name]}" } }
                                         truncate { fields  => "sproc" length_bytes => 1023 } }
  if [source][port]                    { mutate { add_field => { "spt"                          => "%{[source][port]}" } } }
  if [source][ip]                      { mutate { add_field => { "src"                          => "%{[source][ip]}" } } }
  

  if [source][user][id]                { mutate { add_field => { "suid"                         => "%{[source][user][id]}" } }
                                         truncate { fields  => "suid" length_bytes => 1023 } }
  if [source][user][name]              { mutate { add_field => { "suser"                        => "%{[source][user][name]}" } }
                                         truncate { fields  => "suser" length_bytes => 1023 } }

  if [event][kind] == "event" { mutate { add_field => { "type" => 0 } } }

}

output {
  file {
    codec => cef {
      vendor => "%{vendor}"
      product => "%{product}"
      version => "%{version}"
      signature => "%{signature}"
      name => "%{name}"
      severity => "%{severity}"

      fields => [ "act","agentDnsDomain","agt","ahost","aid","amac","app","art","at","av","customerExternalID","customerURI","destinationDnsDomain","destinationServiceName","destinationTranslatedAddress","destinationTranslatedPort","deviceDirection","deviceDnsDomain","DevicePayloadId","deviceProcessName","dhost","dlat","dlong","dmac","dpid","dpriv","dproc","dpt","dst","dtz","duid","duser","dvchost","dvcmac","dvc","dvcpid","end","eventId","fileCreateTime","fileId","fileModificationTime","filePath","filePermission","fileType","fname","fsize","in","outcome","out","proto","requestClientApplication","requestContext","requestMethod","request","rt","shost","slat","slong","smac","sourceDnsDomain","sourceServiceName","sourceTranslatedAddress","sourceTranslatedPort","spid","spriv","sproc","spt","src","start","suid","suser","type", "msg" ]

      delimiter => "\r\n"
    }
    path => "/path/to/output/file.log"
  }
}
